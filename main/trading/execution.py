#!/usr/bin/python
# -*- coding: utf-8 -*-

import datetime as dt
import Queue as queue
from abc import ABCMeta, abstractmethod
from event import FillEvent, OrderEvent


class ExecutionHandler(object):
    """
    The ExecutionHandler abstract base class handles the interaction
    between a set of order objects generated by a Portfolio and the 
    ultimate set of Fill objects that actually occur in the market.

    The handlers can be used to subclass simulated brokerages or live 
    brokerages, with identical interfaces. This allow strategies to be
    backtested in a very similar manner to the live trading engine.
    """

    __metaclass__ = ABCMeta

    @abstractmethod
    def execute_order(self, event):
        """
        Takes an Order event and executes it, producing a Fill event
        that gets placed onto the Event queue.

        Parameters:
        event   Contains an Event object with order information.
        """
        raise NotImplementedError("Should implement 'execute_order()'")
